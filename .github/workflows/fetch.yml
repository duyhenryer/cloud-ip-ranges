name: Auto Update Cloud Provider IP Ranges

on:
  schedule:
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      providers:
        description: 'Select providers'
        type: choice
        options: [all, aws, cloudflare, gcp, digitalocean, oracle]
        default: all
      create-merged:
        description: 'Create merged files'
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        provider: [aws, cloudflare, gcp, digitalocean, oracle]

    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Fetch ${{ matrix.provider }} ranges
        if: github.event_name == 'schedule' || github.event.inputs.providers == 'all' || github.event.inputs.providers == matrix.provider
        run: |
          set -e
          mkdir -p data/${{ matrix.provider }}
          case "${{ matrix.provider }}" in
            aws)
              curl -sSL https://ip-ranges.amazonaws.com/ip-ranges.json -o data/aws/ip-ranges.json
              jq -r '.prefixes[].ip_prefix' data/aws/ip-ranges.json | sort -u > data/aws/ipv4.txt
              jq -r '.ipv6_prefixes[].ipv6_prefix' data/aws/ip-ranges.json | sort -u > data/aws/ipv6.txt
              ;;
            cloudflare)
              curl -sSL https://www.cloudflare.com/ips-v4 -o data/cloudflare/ipv4.txt
              curl -sSL https://www.cloudflare.com/ips-v6 -o data/cloudflare/ipv6.txt
              sort -u -o data/cloudflare/ipv4.txt data/cloudflare/ipv4.txt
              sort -u -o data/cloudflare/ipv6.txt data/cloudflare/ipv6.txt
              ;;
            gcp)
              curl -sSL https://www.gstatic.com/ipranges/cloud.json -o data/gcp/cloud.json
              jq -r '.prefixes[]?.ipv4Prefix' data/gcp/cloud.json | sort -u > data/gcp/ipv4.txt
              jq -r '.prefixes[]?.ipv6Prefix' data/gcp/cloud.json | sort -u > data/gcp/ipv6.txt
              ;;
            digitalocean)
              curl -sSL https://digitalocean.com/geo/google.csv -o data/digitalocean/ranges.csv
              awk -F',' 'NR>1 {print $1}' data/digitalocean/ranges.csv | grep '/' | sort -u > data/digitalocean/ipv4.txt
              : > data/digitalocean/ipv6.txt
              ;;
            oracle)
              curl -sSL https://docs.oracle.com/iaas/tools/public_ip_ranges.json -o data/oracle/ranges.json
              jq -r '.regions[]?.cidrs[]?.cidr' data/oracle/ranges.json | sort -u > data/oracle/all-cidrs.txt
              grep -E '^[0-9]+\.' data/oracle/all-cidrs.txt > data/oracle/ipv4.txt || true
              grep -E ':' data/oracle/all-cidrs.txt > data/oracle/ipv6.txt || true
              ;;
          esac
          date -u '+%Y-%m-%d %H:%M:%S UTC' > data/${{ matrix.provider }}/last-updated.txt

      - uses: actions/upload-artifact@v4
        if: github.event_name == 'schedule' || github.event.inputs.providers == 'all' || github.event.inputs.providers == matrix.provider
        with:
          name: ${{ matrix.provider }}-data
          path: data/${{ matrix.provider }}

  merge-and-commit:
    runs-on: ubuntu-latest
    needs: update
    if: github.event.inputs.create-merged != 'false'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare data
        run: |
          mkdir -p data
          for provider_dir in artifacts/*; do
            provider=$(basename "$provider_dir" | sed 's/-data//')
            mkdir -p data/$provider
            cp -r "$provider_dir"/* data/$provider/ || true
          done

      - name: Create merged files at root
        run: |
          # Create merged files at root level
          cat data/*/ipv4.txt | sort -u > all-ipv4.txt
          cat data/*/ipv6.txt | sort -u > all-ipv6.txt
          
          # Show statistics
          echo "📊 IP Ranges Statistics:"
          echo "IPv4 ranges by provider:"
          total_ipv4=0
          for f in data/*/ipv4.txt; do
            p=$(basename $(dirname "$f"))
            count=$(wc -l < "$f")
            echo "  $p: $count"
            total_ipv4=$((total_ipv4 + count))
          done

          echo "IPv6 ranges by provider:"  
          total_ipv6=0
          for f in data/*/ipv6.txt; do
            p=$(basename $(dirname "$f"))
            count=$(wc -l < "$f")
            echo "  $p: $count"
            total_ipv6=$((total_ipv6 + count))
          done
          
          # Final counts
          ipv4_merged=$(wc -l < all-ipv4.txt)
          ipv6_merged=$(wc -l < all-ipv6.txt)
          echo "📈 Merged: IPv4=$ipv4_merged, IPv6=$ipv6_merged, Total=$((ipv4_merged+ipv6_merged))"

      - name: Commit & Push
        run: |
          git config --local user.email "duynhbot@users.noreply.github.com"
          git config --local user.name "duynhbot"
          git add data all-ipv4.txt all-ipv6.txt
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "✅ No changes to commit"
          else
            echo "📝 Changes detected, committing..."
            git status --porcelain
            git commit -m "chore: update IP ranges - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
            echo "✅ Successfully pushed changes"
          fi